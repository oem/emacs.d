#+AUTHOR: oem
#+TITLE: My Emacs Configuration

* Emacs Org Configuration

  This file is tangled using =org-babel-load-file=. What this does is
  generate a =emacs-init.el= from the =emacs-lisp= source blocks.

* Sane Defaults

   I personally don't need backups and find them quite cluttery.
   #+BEGIN_SRC emacs-lisp :tangle yes
    (setq make-backup-files nil) ; stop creating backup~ files
    (setq auto-save-default nil) ; stop creating #autosave# files
   #+END_SRC
   
   Disable the startup screen.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq inhibit-startup-screen t)
   #+END_SRC
   
   The inbuild emacs feature to show matching paranthesis is great!
   #+BEGIN_SRC emacs-lisp :tangle yes
    (setq show-paren-delay 0)
    (show-paren-mode 1)
   #+END_SRC

* Package Manager
** Sources

   #+BEGIN_SRC emacs-lisp :tangle yes
    (require 'package)
    (setq package-enable-at-startup nil)
    (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
			    ("gnu"   . "http://elpa.gnu.org/packages/")
			    ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)
   #+END_SRC

** Bootstrapping
   
  Install packages if they are not installed yet:
  #+BEGIN_SRC emacs-lisp :tangle yes
    (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
    (require 'use-package)
  #+END_SRC

* UI
** Cleaning up unnecessary things

   I like to keep the appearance as focused on the actual content as possible:
   #+BEGIN_SRC emacs-lisp :tangle yes
    (scroll-bar-mode -1)
    (tool-bar-mode   -1)
    (tooltip-mode    -1)
    (menu-bar-mode   -1)
   #+END_SRC
   
   I don't really need the audio or visual bell feedback:
   #+BEGIN_SRC emacs-lisp :tangle yes
    (setq ring-bell-function 'ignore)
   #+END_SRC

** Titlebar
   
   I prefer a transparent titlebar without the file icons and titles:
   #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (setq ns-use-proxy-icon nil)
    (setq frame-title-format nil)
   #+END_SRC

** Frame

   Setting some default frame size that acts more like a CLI buffer:
   #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'default-frame-alist '(height . 24))
    (add-to-list 'default-frame-alist '(width . 80))
   #+END_SRC

** Theme

   #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package doom-themes
    :ensure t)
    
    (use-package poet-theme
    :ensure t
    :config (load-theme 'poet-dark-monochrome t))
   #+END_SRC

** Typography
   
   I love the Cartograph font, well worth its money. Also, some more line spacing makes things far more readable:
   #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'default-frame-alist '(font . "Cartograph Mono CF-14"))
    (setq-default line-spacing 16)
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp :tangle yes
    (set-face-attribute 'default nil :family "Cartograph Mono CF" :height 140)
    (set-face-attribute 'fixed-pitch nil :family "Cartograph Mono CF" :weight 'light :height 140)
    (set-face-attribute 'variable-pitch nil :family "Avenir Next LT Pro" :weight 'semi-bold :height 200)
   #+END_SRC
   
   Wrap words softly but will kill-line the whole actual line:
   #+BEGIN_SRC emacs-lisp :tangle yes
    (global-visual-line-mode t)
    (setq-default word-wrap t)
   #+END_SRC
   
   Variable pitch mode will help rendering mixed fonts
   #+BEGIN_SRC emacs-lisp :tangle yes
    (add-hook 'text-mode-hook
		(lambda ()
		    (variable-pitch-mode 1))) 
   #+END_SRC

** Modeline
   
   #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package doom-modeline
	:ensure t
	:hook (after-init . doom-modeline-mode))
    (setq doom-modeline-height 35)
   #+END_SRC

* Fuzzy
** Helm
   
   #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package helm
    :ensure t
    :init
    (setq helm-M-x-fuzzy-match t
    helm-mode-fuzzy-match t
    helm-buffers-fuzzy-matching t
    helm-recentf-fuzzy-match t
    helm-locate-fuzzy-match t
    helm-semantic-fuzzy-match t
    helm-imenu-fuzzy-match t
    helm-completion-in-region-fuzzy-match t
    helm-candidate-number-list 150
    helm-split-window-in-side-p t
    helm-move-to-line-cycle-in-source t
    helm-echo-input-in-header-line t
    helm-autoresize-max-height 0
    helm-autoresize-min-height 20)
    :config
    (helm-mode 1))
   #+END_SRC

* Keybinds
** Discoverable with which key

   #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package which-key
    :ensure t
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    :config
    (which-key-mode 1))
   #+END_SRC

** Evil Mode

   #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package evil
    :ensure t
    :config
    (evil-mode 1))

    (use-package evil-escape
    :ensure t
    :init
    (setq-default evil-escape-key-sequence "jk")
    :config
    (evil-escape-mode 1))
   #+END_SRC
** Keybindings with general
  
   #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package general
    :ensure t
    :config (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    ;; "/"   '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
    "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
    "SPC" '(helm-M-x :which-key "M-x")
    "ff"  '(helm-find-files :which-key "find files")
    ;; Buffers
    "bb"  '(helm-buffers-list :which-key "buffers list")
    ;; Window
    "wl"  '(windmove-right :which-key "move right")
    "wh"  '(windmove-left :which-key "move left")
    "wk"  '(windmove-up :which-key "move up")
    "wj"  '(windmove-down :which-key "move bottom")
    "w/"  '(split-window-right :which-key "split right")
    "w-"  '(split-window-below :which-key "split bottom")
    "wx"  '(delete-window :which-key "delete window")
    ;; Others
    "at"  '(ansi-term :which-key "open terminal")
    ))
   #+END_SRC


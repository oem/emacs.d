#+AUTHOR: oem
#+TITLE: My Emacs Configuration

* Emacs Org

This file is tangled using =org-babel-load-file=. It generates
 a =emacs-init.el= file from the =emacs-lisp= source blocks.

* Sane Defaults

I personally don't need backups and find them quite cluttery.
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq make-backup-files nil) ; stop creating backup~ files
    (setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC

Disable the startup screen.
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq inhibit-startup-screen t)
#+END_SRC

The inbuild emacs feature to show matching paranthesis is great!
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq show-paren-delay 0)
    (show-paren-mode 1)
#+END_SRC

* Package Manager
** Sources

#+BEGIN_SRC emacs-lisp :tangle yes
    (require 'package)
    (setq package-enable-at-startup nil)
    (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
			    ("gnu"   . "http://elpa.gnu.org/packages/")
			    ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)
#+END_SRC

** Bootstrapping

Install packages if they are not installed yet:
#+BEGIN_SRC emacs-lisp :tangle yes
    (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
    (require 'use-package)
#+END_SRC

Load path from shell (this is necessary when starting emacs as GUI on Mac OS):
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

* UI
** Cleaning up unnecessary things

I like to keep the appearance as focused on the actual content as possible:
#+BEGIN_SRC emacs-lisp :tangle yes
    (scroll-bar-mode -1)
    (tool-bar-mode   -1)
    (tooltip-mode    -1)
    (menu-bar-mode   -1)
#+END_SRC

I don't really need the audio or visual bell feedback:
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq ring-bell-function 'ignore)
#+END_SRC

** Titlebar

I prefer a transparent titlebar without the file icons and titles:
#+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (setq ns-use-proxy-icon nil)
    (setq frame-title-format nil)
#+END_SRC

** Frame

Setting some default frame size that acts more like a CLI buffer:
#+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'default-frame-alist '(height . 24))
    (add-to-list 'default-frame-alist '(width . 80))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package doom-themes
    :ensure t)

    (use-package flatui-theme
    :ensure t)
    
    (use-package poet-theme
    :ensure t
    :config (load-theme 'poet-dark-monochrome t))
#+END_SRC

** Typography

I love the Cartograph font, well worth its money. Also, some more line spacing makes things far more readable:
#+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'default-frame-alist '(font . "Cartograph Mono CF-14"))
    (setq-default line-spacing 16)
#+END_SRC

Wrap words softly but will kill-line the whole actual line:
#+BEGIN_SRC emacs-lisp :tangle yes
    (global-visual-line-mode t)
    (setq-default word-wrap t)
#+END_SRC

Variable pitch mode will help rendering mixed fonts
#+BEGIN_SRC emacs-lisp :tangle yes
    (add-hook 'text-mode-hook
		(lambda ()
		    (variable-pitch-mode 1)))
#+END_SRC

Sets fonts for fixed and variable pitch:
#+BEGIN_SRC emacs-lisp :tangle yes
    (set-face-attribute 'default nil :family "Cartograph Mono CF" :height 140)
    (set-face-attribute 'fixed-pitch nil :family "Cartograph Mono CF" :weight 'light :height 140)
    (set-face-attribute 'variable-pitch nil :family "Avenir Next LT Pro" :weight 'bold :height 160)
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package doom-modeline
	:ensure t
	:hook (after-init . doom-modeline-mode))
    (setq doom-modeline-height 40)
#+END_SRC

* Fuzzy
** Helm

#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package helm
    :ensure t
    :init
    (setq helm-M-x-fuzzy-match t
    helm-mode-fuzzy-match t
    helm-buffers-fuzzy-matching t
    helm-recentf-fuzzy-match t
    helm-locate-fuzzy-match t
    helm-semantic-fuzzy-match t
    helm-imenu-fuzzy-match t
    helm-completion-in-region-fuzzy-match t
    helm-candidate-number-list 150
    helm-split-window-in-side-p t
    helm-move-to-line-cycle-in-source t
    helm-echo-input-in-header-line t
    helm-autoresize-max-height 0
    helm-autoresize-min-height 20)
    :config
    (helm-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
    (setq helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window

	helm-echo-input-in-header-line t) ;; input close to where I type

    (defun oem//helm-hide-minibuffer-maybe ()
    "Hide minibuffer in Helm session if we use the header line as input field."
    (when (with-helm-buffer helm-echo-input-in-header-line)
	(let ((ov (make-overlay (point-min) (point-max) nil nil t)))
	(overlay-put ov 'window (selected-window))
	(overlay-put ov 'face
		    (let ((bg-color (face-background 'default nil)))
			`(:background ,bg-color :foreground ,bg-color)))
	(setq-local cursor-type nil))))

    (add-hook 'helm-minibuffer-set-up-hook
	    'oem//helm-hide-minibuffer-maybe)

    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 20)
    (helm-autoresize-mode 1)
#+END_SRC

** Ripgrep integration

I could not make helm-ag work for me well so far (too slow with sub searches and didn't open files), so I am going with deadgrep instead:
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package deadgrep :ensure t)
#+END_SRC

* Keybinds
** Discoverable with which-key

#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package which-key
    :ensure t
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    :config
    (which-key-mode 1))
#+END_SRC

** Evil Mode

#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-escape
    :ensure t
    :config
    (evil-escape-mode 1))
#+END_SRC

#+END_SRC

** Keybindings with general
   
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package general
    :ensure t
    :config (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    "/"   '(deadgrep :which-key "ripgrep")
    "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
    "SPC" '(helm-M-x :which-key "M-x")
    "ff"  '(helm-find-files :which-key "find files")
    ;; Buffers
    "bb"  '(helm-buffers-list :which-key "buffers list")
    ;; Window
    "wl"  '(windmove-right :which-key "move right")
    "wh"  '(windmove-left :which-key "move left")
    "wk"  '(windmove-up :which-key "move up")
    "wj"  '(windmove-down :which-key "move bottom")
    "w/"  '(split-window-right :which-key "split right")
    "w-"  '(split-window-below :which-key "split bottom")
    "wx"  '(delete-window :which-key "delete window")
    ;; Org Mode
    "oa" '(org-agenda :which-key "org-agenda")
    "oc" '(org-capture :which-ley "org-capture")
    ;; magit
    "g" '(magit :which-key "git")
    ;; Others
    "at"  '(ansi-term :which-key "open terminal")
    ))
#+END_SRC

* Org Mode

Tell org mode where to find the org files. This is being used for the agenda and refiling.
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-agenda-files (list "~/org" "~/org/projects"))
#+END_SRC

Track state changes with timestamps and/or notes
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-log-done 'time)
#+END_SRC

Make agenda view not remove my split windows
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-agenda-window-setup 'current-window)
#+END_SRC

Follow links with RET
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-return-follows-link t)
#+END_SRC

Remove the highlight from checkboxes
#+BEGIN_SRC emacs-lisp :tangle yes
    (custom-set-faces '(org-checkbox ((t (:box nil :foreground nil :inherit org-todo :background nil)))))
#+END_SRC

*** org bullets
  
Show nicer org bullets:
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** org-capture

capturing todos and links:
#+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-capture-templates
	'(("t" "Task" entry
	    (file+headline "~/org/inbox.org" "Tasks")
	    "* TODO %?\n %i\n")
	    ("n" "Next Task" entry (file+headline "~/org/inbox.org" "Tasks")
	    "** TODO %? \nDEADLINE: %t") 
	    ("l" "Link" plain
	    (file+headline "~/org/inbox.org" "Bookmarks")
	    "%?\n %i\n")))
#+END_SRC

*** org-refile

#+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-refile-targets '((org-agenda-files :maxlevel . 9)))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC 

* Languages
** Version control
   
Magit is an excellent git frontend (some even consider it one of the killer features of emacs):
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package magit
    :ensure t
    :init
    (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
    (use-package evil-magit :ensure t)
#+END_SRC

I also like to see the changes in the gutter
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package git-gutter-fringe
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'git-gutter-mode)
    (add-hook 'focus-in-hook 'git-gutter:update-all-windows)
    (fringe-helper-define 'git-gutter-fr:added '(center repeated) "XXXX....")
    (fringe-helper-define 'git-gutter-fr:modified '(center repeated) "XXXX....")
    (fringe-helper-define 'git-gutter-fr:deleted '(center modified) "XXXX....")
    :init
    (global-git-gutter-mode))
#+END_SRC

